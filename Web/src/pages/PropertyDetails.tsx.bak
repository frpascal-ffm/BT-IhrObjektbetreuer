import React, { useState, useEffect, useContext } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import Header from '@/components/Header';
import Sidebar from '@/components/Sidebar';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Property, Job } from '@/types';
import { Building, Calendar, ListTodo, Save, Trash2, Edit, ArrowLeft, Plus } from 'lucide-react';
import StatusBadge from '@/components/StatusBadge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/components/ui/use-toast';
import { getDocument, getCollection, updateDocument, deleteDocument, addDocument } from '@/lib/firestore';
import ICAL from 'ical.js';
import { useAuth } from '@/lib/AuthContext';

// Hilfsfunktion für Firestore Timestamp zu Date
function convertJobDates(job: any): Job {
  return {
    ...job,
    createdAt: job.createdAt?.toDate ? job.createdAt.toDate() : new Date(job.createdAt),
    updatedAt: job.updatedAt?.toDate ? job.updatedAt.toDate() : new Date(job.updatedAt),
    dueDate: job.dueDate?.toDate ? job.dueDate.toDate() : job.dueDate ? new Date(job.dueDate) : undefined,
    completedAt: job.completedAt?.toDate ? job.completedAt.toDate() : job.completedAt ? new Date(job.completedAt) : undefined,
  };
}

const WASTE_TYPES = [
  { key: 'altpapier', label: 'Altpapier', color: 'bg-green-700', short: 'P' },
  { key: 'bioabfall', label: 'Bioabfall', color: 'bg-yellow-900', short: 'B' },
  { key: 'restabfall', label: 'Restabfall', color: 'bg-gray-500', short: 'R1' },
  { key: 'restabfall2', label: 'Restabfall 2. wöchentliche Leerung (wenn beantragt)', color: 'bg-gray-500', short: 'R2' },
  { key: 'verpackung', label: 'Verpackung', color: 'bg-yellow-400', short: 'V' },
];

const wasteTypeMatchers = {
  altpapier: /altpapier/i,
  bioabfall: /bioabfall/i,
  restabfall: /restabfall 1/i,
  restabfall2: /restabfall 2/i,
  verpackung: /verpackung(en)?|grüner punkt/i,
};

const PropertyDetails = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { toast } = useToast();
  const { currentUser } = useAuth();
  const [userRole, setUserRole] = useState<string | null>(null);
  
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [editing, setEditing] = useState(false);
  const [property, setProperty] = useState<Property | null>(null);
  const [loading, setLoading] = useState(true);
  const [uploadingIcs, setUploadingIcs] = useState(false);
  const [jobs, setJobs] = useState<Job[]>([]);
  const [selectedWasteTypes, setSelectedWasteTypes] = useState<string[]>(WASTE_TYPES.map(w => w.key));
  const [newNoteText, setNewNoteText] = useState('');
  
  // Load property and jobs from Firestore
  const loadData = async () => {
    setLoading(true);
    const propertyData = await getDocument('properties', id!);
    const jobsData = await getCollection('jobs');
    setProperty(propertyData as Property);
    setJobs((jobsData as Job[]).filter(job => job.propertyId === id).map(convertJobDates));
    setLoading(false);
  };
  
  useEffect(() => {
    if (id) loadData();
  }, [id]);
  
  // Lade Rolle des eingeloggten Users
  useEffect(() => {
    const fetchRole = async () => {
      if (!currentUser?.email) return;
      const employees = await getCollection('employees');
      const me = employees.find((emp: any) => emp.email === currentUser.email);
      setUserRole(me?.role || null);
    };
    fetchRole();
  }, [currentUser]);
  
  // Handle saving property changes
  const handleSaveChanges = async () => {
    if (!property) return;
    await updateDocument('properties', property.id, { ...property, updatedAt: new Date() });
    toast({ title: 'Änderungen gespeichert', description: 'Die Änderungen wurden erfolgreich gespeichert.' });
    setEditing(false);
    loadData();
  };
  
  // Handle property deletion
  const handleDeleteProperty = async () => {
    if (!property) return;
    await deleteDocument('properties', property.id);
    toast({ title: 'Liegenschaft gelöscht', description: 'Die Liegenschaft wurde erfolgreich gelöscht.' });
    navigate('/properties');
  };
  
  const handleWasteTypeToggle = async (key: string) => {
    setSelectedWasteTypes(prev => {
      if (prev.includes(key)) {
        // Entfernen: zugehörige Aufträge löschen
        const jobsToDelete = jobs.filter(job => wasteTypeMatchers[key].test(job.title));
        jobsToDelete.forEach(job => deleteDocument('jobs', job.id));
        return prev.filter(k => k !== key);
      } else {
        return [...prev, key];
      }
    });
  };
  
  const handleIcsUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file || !property) return;
    
    setUploadingIcs(true);
    try {
      const text = await file.text();
      const jcalData = ICAL.parse(text);
      const comp = new ICAL.Component(jcalData);
      const vevents = comp.getAllSubcomponents('vevent');
      
      let imported = 0;
      let skipped = 0;
      let existingCount = 0;
      
      // Get existing waste collection jobs to avoid duplicates
      const existingJobs = jobs.filter(job => job.jobType === 'abfallkalender');
      const existingDates = new Set(existingJobs.map(job => 
        job.dueDate ? job.dueDate.toISOString().split('T')[0] : null
      ).filter(Boolean));
      
      for (const vevent of vevents) {
        try {
          // Get event summary and start date
          const summary = vevent.getFirstPropertyValue('summary') || '';
          if (!summary) {
            skipped++;
            continue;
          }
          
          // Parse date - try different approaches
          let jsDate;
          try {
            const event = new ICAL.Event(vevent);
            if (event.startDate) {
              jsDate = event.startDate.toJSDate();
            }
          } catch (err) {
            // Fallback to manual parsing
          }
          
          // If date is still not valid, try direct DTSTART parsing
          if (!jsDate) {
            const dtstartProp = vevent.getFirstProperty('dtstart');
            if (dtstartProp) {
              const dtstartValue = dtstartProp.getFirstValue();
              if (typeof dtstartValue === 'string' && /^\d{8}$/.test(dtstartValue)) {
                // Format YYYYMMDD
                const year = parseInt(dtstartValue.slice(0, 4), 10);
                const month = parseInt(dtstartValue.slice(4, 6), 10) - 1;
                const day = parseInt(dtstartValue.slice(6, 8), 10);
                jsDate = new Date(year, month, day);
              }
            }
          }
          
          if (!jsDate || isNaN(jsDate.getTime())) {
            skipped++;
            continue;
          }
          
          // Check for duplicates using the date
          const dateStr = jsDate.toISOString().split('T')[0];
          if (existingDates.has(dateStr) && summary.includes(property.address)) {
            existingCount++;
            continue;
          }
          
          // Find matching waste type
          let matchedType = null;
          for (const key of selectedWasteTypes) {
            if (wasteTypeMatchers[key].test(summary)) {
              matchedType = key;
              break;
            }
          }
          
          if (!matchedType) {
            skipped++;
            continue;
          }
          
          // Only import entries related to the current property
          if (!summary.includes(property.address) && 
              !summary.includes(property.postalCode) &&
              !summary.includes(property.city)) {
            skipped++;
            continue;
          }
          
          // Create new job for this waste collection date
          const wasteTypeInfo = WASTE_TYPES.find(w => w.key === matchedType);
          const newJob = {
            propertyId: property.id,
            title: `${wasteTypeInfo?.label || matchedType} | ${property.address}`,
            description: `Abfuhrtermin für ${wasteTypeInfo?.label || matchedType} am ${jsDate.toLocaleDateString()}`,
            status: 'open',
            createdAt: new Date(),
            updatedAt: new Date(),
            dueDate: jsDate,
            jobType: 'abfallkalender',
            wasteType: matchedType
          };
          
          await addDocument('jobs', newJob);
          imported++;
          
          // Add to existing dates to prevent duplicates in this run
          existingDates.add(dateStr);
        } catch (eventErr) {
          console.warn('Fehler beim Verarbeiten eines Termins:', eventErr);
          skipped++;
        }
      }
      
      const message = `${imported} Termine importiert, ${skipped} übersprungen${existingCount > 0 ? `, ${existingCount} bereits vorhanden` : ''}`;
      toast({ 
        title: 'Abfallkalender importiert', 
        description: message
      });
      
      if (imported > 0) {
        loadData(); // Reload data from Firestore
      }
    } catch (err) {
      console.error('Fehler beim ICS-Import:', err);
      toast({ 
        title: 'Fehler beim Import', 
        description: 'Die Datei konnte nicht verarbeitet werden. Bitte überprüfen Sie das Format.',
        variant: 'destructive'
      });
    } finally {
      setUploadingIcs(false);
      // Clear the file input
      if (e.target) {
        e.target.value = '';
      }
    }
  };
  
  const handleAddNote = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!property || !currentUser) return;
    const note = {
      id: `note-${Date.now()}`,
      text: newNoteText,
      createdAt: new Date(),
      user: currentUser.email || 'Unbekannt',
    };
    const updatedNotes = [...(property.notes || []), note];
    await updateDocument('properties', property.id, { notes: updatedNotes, updatedAt: new Date() });
    setProperty({ ...property, notes: updatedNotes });
    setNewNoteText('');
  };
  
  if (loading) {
    return <div className="min-h-screen flex items-center justify-center text-gray-500">Lade Daten...</div>;
  }
  
  if (!property) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-semibold mb-2">Liegenschaft nicht gefunden</h2>
          <p className="mb-4 text-gray-500">Die gesuchte Liegenschaft konnte nicht gefunden werden.</p>
          <Button onClick={() => navigate('/properties')}>Zurück zur Übersicht</Button>
        </div>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50 flex">
      <Sidebar isOpen={sidebarOpen} onClose={() => setSidebarOpen(false)} />
      
      <div className="flex-1 flex flex-col">
        <Header title="Liegenschaftsdetails" toggleSidebar={() => setSidebarOpen(!sidebarOpen)} />
        
        <main className="flex-1 p-4 lg:p-8 overflow-y-auto">
          <div className="mb-6 flex items-center">
            <Button 
              variant="ghost" 
              className="mr-4"
              onClick={() => navigate('/properties')}
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              Zurück
            </Button>
            <div className="flex-1">
              <h1 className="text-2xl font-semibold">{property.name}</h1>
              <p className="text-gray-500">{property.address}, {property.postalCode} {property.city}</p>
            </div>
            <div className="flex gap-2">
              {editing ? (
                <Button onClick={handleSaveChanges}>
                  <Save className="h-4 w-4 mr-2" />
                  Speichern
                </Button>
              ) : (
                <>
                  <Button variant="outline" onClick={() => setEditing(true)}>
                    <Edit className="h-4 w-4 mr-2" />
                    Bearbeiten
                  </Button>
                  <Button variant="destructive" onClick={handleDeleteProperty}>
                    <Trash2 className="h-4 w-4 mr-2" />
                    Löschen
                  </Button>
                </>
              )}
            </div>
          </div>
          
          <Tabs defaultValue="details">
            <TabsList className="mb-6">
              <TabsTrigger value="details">Details</TabsTrigger>
              <TabsTrigger value="jobs">Aufträge ({jobs.length})</TabsTrigger>
              <TabsTrigger value="abfall">Abfall</TabsTrigger>
              <TabsTrigger value="notizen">Notizen</TabsTrigger>
            </TabsList>
            
            <TabsContent value="details" className="space-y-6">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="flex items-center text-lg">
                    <Building className="h-5 w-5 mr-2" />
                    Liegenschaftsdaten
                  </CardTitle>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4">
                  {editing ? (
                    // Editable form
                    <>
                      <div className="space-y-2">
                        <Label htmlFor="name">Name</Label>
                        <Input 
                          id="name" 
                          value={property.name} 
                          onChange={(e) => setProperty({...property, name: e.target.value})}
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="type">Typ</Label>
                        <Input 
                          id="type" 
                          value={property.type} 
                          onChange={(e) => setProperty({...property, type: e.target.value})}
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="address">Adresse</Label>
                        <Input 
                          id="address" 
                          value={property.address} 
                          onChange={(e) => setProperty({...property, address: e.target.value})}
                        />
                      </div>
                      
                      <div className="grid grid-cols-2 gap-2">
                        <div className="space-y-2">
                          <Label htmlFor="postalCode">PLZ</Label>
                          <Input 
                            id="postalCode" 
                            value={property.postalCode} 
                            onChange={(e) => setProperty({...property, postalCode: e.target.value})}
                          />
                        </div>
                        
                        <div className="space-y-2">
                          <Label htmlFor="city">Stadt</Label>
                          <Input 
                            id="city" 
                            value={property.city} 
                            onChange={(e) => setProperty({...property, city: e.target.value})}
                          />
                        </div>
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="size">Größe (m²)</Label>
                        <Input 
                          id="size" 
                          type="number" 
                          value={property.size} 
                          onChange={(e) => setProperty({...property, size: Number(e.target.value)})}
                        />
                      </div>
                    </>
                  ) : (
                    // Read-only view
                    <>
                      <div>
                        <Label>Name</Label>
                        <p className="mt-1">{property.name}</p>
                      </div>
                      
                      <div>
                        <Label>Typ</Label>
                        <p className="mt-1">{property.type}</p>
                      </div>
                      
                      <div>
                        <Label>Adresse</Label>
                        <p className="mt-1">{property.address}</p>
                      </div>
                      
                      <div className="flex gap-4">
                        <div>
                          <Label>PLZ</Label>
                          <p className="mt-1">{property.postalCode}</p>
                        </div>
                        
                        <div>
                          <Label>Stadt</Label>
                          <p className="mt-1">{property.city}</p>
                        </div>
                      </div>
                      
                      <div>
                        <Label>Größe</Label>
                        <p className="mt-1">{property.size} m²</p>
                      </div>
                    </>
                  )}
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Kontaktdaten</CardTitle>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4">
                  {editing ? (
                    // Editable form
                    <>
                      <div className="space-y-2">
                        <Label htmlFor="owner">Eigentümer</Label>
                        <Input 
                          id="owner" 
                          value={property.owner} 
                          onChange={(e) => setProperty({...property, owner: e.target.value})}
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="contactPhone">Telefon</Label>
                        <Input 
                          id="contactPhone" 
                          value={property.contactPhone} 
                          onChange={(e) => setProperty({...property, contactPhone: e.target.value})}
                        />
                      </div>
                      
                      <div className="space-y-2">
                        <Label htmlFor="contactEmail">E-Mail</Label>
                        <Input 
                          id="contactEmail" 
                          value={property.contactEmail} 
                          onChange={(e) => setProperty({...property, contactEmail: e.target.value})}
                        />
                      </div>
                    </>
                  ) : (
                    // Read-only view
                    <>
                      <div>
                        <Label>Eigentümer</Label>
                        <p className="mt-1">{property.owner || "-"}</p>
                      </div>
                      
                      <div>
                        <Label>Telefon</Label>
                        <p className="mt-1">{property.contactPhone || "-"}</p>
                      </div>
                      
                      <div>
                        <Label>E-Mail</Label>
                        <p className="mt-1">{property.contactEmail || "-"}</p>
                      </div>
                    </>
                  )}
                </CardContent>
              </Card>
              
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Notizen</CardTitle>
                </CardHeader>
                <CardContent>
                  {editing ? (
                    <Textarea 
                      value={property.notes} 
                      onChange={(e) => setProperty({...property, notes: e.target.value})}
                      rows={5}
                      placeholder="Notizen zur Liegenschaft hinzufügen..."
                    />
                  ) : (
                    <p className="text-gray-700">{property.notes || "Keine Notizen vorhanden."}</p>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="jobs" className="space-y-4">
              <div className="flex justify-between items-center">
                <h2 className="text-lg font-medium">Aufträge für diese Liegenschaft</h2>
                
                <Button onClick={() => navigate(`/jobs/new?propertyId=${id}`)}>
                  <Plus className="h-4 w-4 mr-2" />
                  Auftrag erstellen
                </Button>
              </div>
              
              {jobs.length === 0 ? (
                <Card>
                  <CardContent className="py-6 text-center">
                    <p className="text-gray-500 mb-4">Es sind noch keine Aufträge für diese Liegenschaft vorhanden.</p>
                    <Button onClick={() => navigate(`/jobs/new?propertyId=${id}`)}>
                      <Plus className="h-4 w-4 mr-2" />
                      Auftrag erstellen
                    </Button>
                  </CardContent>
                </Card>
              ) : (
                <Card>
                  <CardContent className="p-0">
                    <ul className="divide-y divide-gray-200">
                      {jobs.map((job) => (
                        <li 
                          key={job.id} 
                          className="p-4 hover:bg-gray-50 cursor-pointer" 
                          onClick={() => navigate(`/jobs/${job.id}`)}
                        >
                          <div className="flex justify-between items-start">
                            <div>
                              <h3 className="font-medium">{job.title}</h3>
                              <p className="text-sm text-gray-500 mt-1">{job.description.substring(0, 100)}{job.description.length > 100 ? '...' : ''}</p>
                              <div className="flex items-center text-xs text-gray-500 mt-2">
                                <Calendar className="h-3 w-3 mr-1" />
                                Erstellt am {new Date(job.createdAt).toLocaleDateString()}
                              </div>
                            </div>
                            <StatusBadge status={job.status} />
                          </div>
                        </li>
                      ))}
                    </ul>
                  </CardContent>
                </Card>
              )}
            </TabsContent>
            
            <TabsContent value="abfall" className="space-y-6">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Abfallarten filtern</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex gap-2 flex-wrap mb-4">
                    {WASTE_TYPES.map(wt => (
                      <button
                        key={wt.key}
                        type="button"
                        className={`flex items-center px-3 py-1 rounded-full text-sm font-medium border ${selectedWasteTypes.includes(wt.key) ? wt.color + ' text-white' : 'bg-gray-100 text-gray-600'} transition`}
                        onClick={() => handleWasteTypeToggle(wt.key)}
                      >
                        <span className="inline-block w-6 h-6 rounded-full mr-2 flex items-center justify-center font-bold" style={{ background: selectedWasteTypes.includes(wt.key) ? '' : '#e5e7eb' }}>{wt.short}</span>
                        {wt.label}
                      </button>
                    ))}
                  </div>
                  {/* Termine je Abfallart */}
                  {selectedWasteTypes.map(wasteKey => {
                    const jobsForType = jobs.filter(job => 
                      job.wasteType === wasteKey || wasteTypeMatchers[wasteKey].test(job.title)
                    );
                    if (jobsForType.length === 0) return null;
                    const wasteLabel = WASTE_TYPES.find(w => w.key === wasteKey)?.label || wasteKey;
                    return (
                      <div key={wasteKey} className="mb-6">
                        <div className="font-semibold mb-2">{wasteLabel}</div>
                        <ul className="space-y-2">
                          {jobsForType
                            .sort((a, b) => {
                              if (!a.dueDate) return 1;
                              if (!b.dueDate) return -1;
                              return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();
                            })
                            .map(job => (
                              <li key={job.id} className="border rounded p-2 flex flex-col md:flex-row md:items-center md:justify-between">
                                <span>{job.title}</span>
                                <span className="text-xs text-gray-500 mt-1 md:mt-0">
                                  {job.dueDate ? new Date(job.dueDate).toLocaleDateString() : ''}
                                </span>
                              </li>
                            ))}
                        </ul>
                      </div>
                    );
                  })}
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Abfallkalender (.ics) hochladen</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <Input
                      type="file"
                      accept=".ics"
                      onChange={handleIcsUpload}
                      disabled={uploadingIcs}
                    />
                    {uploadingIcs && (
                      <div className="flex items-center text-sm text-blue-600">
                        <svg className="animate-spin -ml-1 mr-3 h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        Verarbeite ICS-Datei...
                      </div>
                    )}
                    <p className="text-xs text-gray-500">
                      Lade eine .ics-Datei hoch, um Abfalltermine als Aufträge zu importieren.
                      Die Termine werden automatisch nach Abfallarten gefiltert und der Liegenschaft zugeordnet.
                    </p>
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
            
            <TabsContent value="notizen" className="space-y-6">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-lg">Notizen zur Liegenschaft</CardTitle>
                </CardHeader>
                <CardContent>
                  {currentUser && (
                    <form className="mb-6 flex flex-col gap-2" onSubmit={handleAddNote}>
                      <Textarea
                        value={newNoteText}
                        onChange={e => setNewNoteText(e.target.value)}
                        rows={3}
                        placeholder="Notiz hinzufügen..."
                        required
                        autoFocus
                      />
                      <Button type="submit" className="self-end">Notiz speichern</Button>
                    </form>
                  )}
                  {property?.notes && property.notes.length > 0 ? (
                    <ul className="space-y-4">
                      {property.notes.slice().reverse().map((note, idx) => (
                        <li key={note.id || idx} className="border-b pb-2">
                          <div className="text-sm text-gray-700">{note.text}</div>
                          <div className="text-xs text-gray-400 mt-1">{note.user} – {new Date(note.createdAt).toLocaleString()}</div>
                        </li>
                      ))}
                    </ul>
                  ) : (
                    <div className="text-gray-400">Noch keine Notizen vorhanden.</div>
                  )}
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </main>
      </div>
    </div>
  );
};

export default PropertyDetails;
