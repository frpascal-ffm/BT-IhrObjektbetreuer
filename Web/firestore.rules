rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Hilfsfunktion: Prüft ob Benutzer ein Unternehmen ist
    function isCompany() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'company';
    }
    
    // Hilfsfunktion: Prüft ob Benutzer ein Mitarbeiter ist
    function isEmployee() {
      return request.auth != null && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'employee';
    }
    
    // Hilfsfunktion: Prüft ob Benutzer das Unternehmen oder ein Mitarbeiter des Unternehmens ist
    function isCompanyOrEmployee(companyId) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.role == 'company' && user.uid == companyId ||
             user.role == 'employee' && user.companyId == companyId;
    }
    
    // Hilfsfunktion: Prüft Berechtigungen für Mitarbeiter
    function hasPermission(permission) {
      let user = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return user.role == 'company' || 
             (user.role == 'employee' && user.permissions[permission] == true);
    }
    
    // Hilfsfunktion: Prüft ob Benutzer aktiv ist
    function isUserActive() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid));
      return userDoc.data.isActive == true;
    }
    
    // Hilfsfunktion: Prüft ob der Benutzer Zugriff auf seine eigenen Daten hat
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    

    
    // Users Collection with subcollections
    match /users/{userId} {
      // Benutzer können ihre eigenen Daten lesen
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || 
                      isCompany() || 
                      (isEmployee() && resource.data.companyId == request.auth.uid));
      
      // Benutzer können ihre eigenen Daten bearbeiten
      allow write: if request.auth != null && 
                      request.auth.uid == userId && 
                      isUserActive();
      
      // Nur Unternehmen können neue Benutzer erstellen (bei Registrierung)
      allow create: if request.auth != null && 
                       request.auth.uid == userId;
      
      // Properties unter users/-USERID-/properties
      match /properties/{propertyId} {
        allow read, write: if isOwner(userId);
      }
      
      // Jobs unter users/-USERID-/jobs
      match /jobs/{jobId} {
        allow read, write: if isOwner(userId);
      }
      
      // Employees unter users/-USERID-/employees
      match /employees/{employeeId} {
        allow read, write: if isOwner(userId);
      }
      
      // Appointments unter users/-USERID-/appointments
      match /appointments/{appointmentId} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Legacy Collections (für Migration)
    // Properties Collection
    match /properties/{propertyId} {
      // Nur das Unternehmen und seine Mitarbeiter können Properties lesen
      allow read: if request.auth != null && 
                     isUserActive() &&
                     isCompanyOrEmployee(resource.data.companyId);
      
      // Nur das Unternehmen und Mitarbeiter mit entsprechenden Berechtigungen können Properties bearbeiten
      allow write: if request.auth != null && 
                      isUserActive() &&
                      isCompanyOrEmployee(resource.data.companyId) &&
                      hasPermission('canEditProperties');
      
      // Nur Unternehmen können neue Properties erstellen
      allow create: if request.auth != null && 
                       isUserActive() &&
                       isCompany() && 
                       request.resource.data.companyId == request.auth.uid;
    }
    
    // Jobs Collection
    match /jobs/{jobId} {
      // Nur das Unternehmen und seine Mitarbeiter können Jobs lesen
      allow read: if request.auth != null && 
                     isUserActive() &&
                     isCompanyOrEmployee(resource.data.companyId);
      
      // Nur das Unternehmen und Mitarbeiter mit entsprechenden Berechtigungen können Jobs bearbeiten
      allow write: if request.auth != null && 
                      isUserActive() &&
                      isCompanyOrEmployee(resource.data.companyId) &&
                      hasPermission('canEditJobs');
      
      // Nur Unternehmen können neue Jobs erstellen
      allow create: if request.auth != null && 
                       isUserActive() &&
                       isCompany() && 
                       request.resource.data.companyId == request.auth.uid;
    }
    
    // Employees Collection (Legacy)
    match /employees/{employeeId} {
      // Nur das Unternehmen kann seine Mitarbeiter verwalten
      allow read, write: if request.auth != null && 
                           isUserActive() &&
                           isCompany();
    }
    
    // Appointments Collection
    match /appointments/{appointmentId} {
      // Nur das Unternehmen und seine Mitarbeiter können Termine lesen
      allow read: if request.auth != null && 
                     isUserActive() &&
                     isCompanyOrEmployee(resource.data.companyId);
      
      // Nur das Unternehmen und Mitarbeiter mit entsprechenden Berechtigungen können Termine bearbeiten
      allow write: if request.auth != null && 
                      isUserActive() &&
                      isCompanyOrEmployee(resource.data.companyId) &&
                      hasPermission('canEditAppointments');
      
      // Nur Unternehmen können neue Termine erstellen
      allow create: if request.auth != null && 
                       isUserActive() &&
                       isCompany() && 
                       request.resource.data.companyId == request.auth.uid;
    }
    
    // Employee Invitations Collection
    match /employeeInvitations/{invitationId} {
      // Nur das Unternehmen kann seine Einladungen lesen
      allow read: if request.auth != null && 
                     isUserActive() &&
                     resource.data.companyId == request.auth.uid;
      
      // Nur das Unternehmen kann seine Einladungen bearbeiten
      allow write: if request.auth != null && 
                      isUserActive() &&
                      resource.data.companyId == request.auth.uid;
      
      // Nur Unternehmen können neue Einladungen erstellen
      allow create: if request.auth != null && 
                       isUserActive() &&
                       isCompany() && 
                       request.resource.data.companyId == request.auth.uid;
    }
    
    // Zusätzliche Sicherheitsregeln für mobile App
    // Mitarbeiter können nur Termine ihres Unternehmens sehen
    match /appointments/{appointmentId} {
      // Mitarbeiter können nur Termine lesen, die ihnen zugewiesen sind oder zu ihrem Unternehmen gehören
      allow read: if request.auth != null && 
                     isUserActive() &&
                     (isCompanyOrEmployee(resource.data.companyId) ||
                      (isEmployee() && resource.data.assignedTo == request.auth.uid));
    }
    
    // Mitarbeiter können nur Jobs sehen, die ihnen zugewiesen sind oder zu ihrem Unternehmen gehören
    match /jobs/{jobId} {
      allow read: if request.auth != null && 
                     isUserActive() &&
                     (isCompanyOrEmployee(resource.data.companyId) ||
                      (isEmployee() && resource.data.assignedTo == request.auth.uid));
    }
  }
} 