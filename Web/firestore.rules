rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read all items
    match /items/{item} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;
    }
    
    // Properties - accessible by all authenticated users
    match /properties/{property} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Jobs - accessible by all authenticated users
    match /jobs/{job} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Employees - restricted access
    match /employees/{employee} {
      // Allow read if user is authenticated and either:
      // 1. User is reading their own employee record (by email match)
      // 2. User is an admin (this would need to be checked via custom claims in production)
      allow read: if request.auth != null && (
        resource.data.email == request.auth.token.email ||
        request.auth.token.admin == true
      );
      
      // Allow create/update/delete only for admin users
      // In production, this should check for admin custom claims
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
  }
} 